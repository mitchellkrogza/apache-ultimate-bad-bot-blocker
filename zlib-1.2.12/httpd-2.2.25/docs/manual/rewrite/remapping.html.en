<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><head><!--
        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
              This file is generated from xml source: DO NOT EDIT
        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      -->
<title>Redirecting and Remapping with mod_rewrite - Apache HTTP Server</title>
<link href="../style/css/manual.css" rel="stylesheet" media="all" type="text/css" title="Main stylesheet" />
<link href="../style/css/manual-loose-100pc.css" rel="alternate stylesheet" media="all" type="text/css" title="No Sidebar - Default font size" />
<link href="../style/css/manual-print.css" rel="stylesheet" media="print" type="text/css" /><link rel="stylesheet" type="text/css" href="../style/css/prettify.css" />
<script src="../style/scripts/prettify.js" type="text/javascript">
</script>

<link href="../images/favicon.ico" rel="shortcut icon" /></head>
<body id="manual-page"><div id="page-header">
<p class="menu"><a href="../mod/">Modules</a> | <a href="../mod/directives.html">Directives</a> | <a href="http://wiki.apache.org/httpd/FAQ">FAQ</a> | <a href="../glossary.html">Glossary</a> | <a href="../sitemap.html">Sitemap</a></p>
<p class="apache">Apache HTTP Server Version 2.2</p>
<img alt="" src="../images/feather.gif" /></div>
<div class="up"><a href="./"><img title="&lt;-" alt="&lt;-" src="../images/left.gif" /></a></div>
<div id="path">
<a href="http://www.apache.org/">Apache</a> &gt; <a href="http://httpd.apache.org/">HTTP Server</a> &gt; <a href="http://httpd.apache.org/docs/">Documentation</a> &gt; <a href="../">Version 2.2</a> &gt; <a href="./">Rewrite</a></div><div id="page-content"><div id="preamble"><h1>Redirecting and Remapping with mod_rewrite</h1>
<div class="toplang">
<p><span>Available Languages: </span><a href="../en/rewrite/remapping.html" title="English">&nbsp;en&nbsp;</a></p>
</div>


<p>This document supplements the <code class="module"><a href="../mod/mod_rewrite.html">mod_rewrite</a></code> 
<a href="../mod/mod_rewrite.html">reference documentation</a>. It describes
how you can use <code class="module"><a href="../mod/mod_rewrite.html">mod_rewrite</a></code> to redirect and remap
request. This includes many examples of common uses of mod_rewrite,
including detailed descriptions of how each works.</p>

<div class="warning">Note that many of these examples won't work unchanged in your
particular server configuration, so it's important that you understand
them, rather than merely cutting and pasting the examples into your
configuration.</div>

</div>
<div id="quickview"><ul id="toc"><li><img alt="" src="../images/down.gif" /> <a href="#old-to-new">From Old to New (internal)</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#old-to-new-extern">Rewriting From Old to New (external)</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#movehomedirs">Resource Moved to Another Server</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#static-to-dynamic">From Static to Dynamic</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#backward-compatibility">Backward Compatibility for file extension change</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#canonicalhost">Canonical Hostnames</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#multipledirs">Search for pages in more than one directory</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#archive-access-multiplexer">Redirecting to Geographically Distributed Servers</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#browser-dependent-content">Browser Dependent Content</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#canonicalurl">Canonical URLs</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#moveddocroot">Moved <code>DocumentRoot</code></a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#fallback-resource">Fallback Resource</a></li>
</ul><h3>See also</h3><ul class="seealso"><li><a href="../mod/mod_rewrite.html">Module documentation</a></li><li><a href="intro.html">mod_rewrite introduction</a></li><li><a href="access.html">Controlling access</a></li><li><a href="vhosts.html">Virtual hosts</a></li><li><a href="proxy.html">Proxying</a></li><li><a href="rewritemap.html">Using RewriteMap</a></li><li><a href="advanced.html">Advanced techniques and tricks</a></li><li><a href="avoid.html">When not to use mod_rewrite</a></li></ul><ul class="seealso"><li><a href="#comments_section">Comments</a></li></ul></div>
<div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="old-to-new" id="old-to-new">From Old to New (internal)</a></h2>

  

  <dl>
    <dt>Description:</dt>

    <dd>
      <p>Assume we have recently renamed the page
      <code>foo.html</code> to <code>bar.html</code> and now want
      to provide the old URL for backward compatibility. However,
      we want that users of the old URL even not recognize that
      the pages was renamed - that is, we don't want the address to
      change in their browser.</p>
    </dd>

    <dt>Solution:</dt>

    <dd>
      <p>We rewrite the old URL to the new one internally via the
      following rule:</p>

<div class="example"><p><code>
RewriteEngine  on<br />
RewriteRule    ^<strong>/foo</strong>\.html$  <strong>/bar</strong>.html [PT]
</code></p></div>
    </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="old-to-new-extern" id="old-to-new-extern">Rewriting From Old to New (external)</a></h2>

  

  <dl>
    <dt>Description:</dt>

    <dd>
      <p>Assume again that we have recently renamed the page
      <code>foo.html</code> to <code>bar.html</code> and now want
      to provide the old URL for backward compatibility. But this
      time we want that the users of the old URL get hinted to
      the new one, i.e. their browsers Location field should
      change, too.</p>
    </dd>

    <dt>Solution:</dt>

    <dd>
      <p>We force a HTTP redirect to the new URL which leads to a
      change of the browsers and thus the users view:</p>

<div class="example"><p><code>
RewriteEngine  on<br />
RewriteRule    ^<strong>/foo</strong>\.html$  <strong>bar</strong>.html  [<strong>R</strong>]
</code></p></div>
</dd>

<dt>Discussion</dt>

    <dd>
    <p>In this example, as contrasted to the <a href="#old-to-new-intern">internal</a> example above, we can simply
    use the Redirect directive. mod_rewrite was used in that earlier
    example in order to hide the redirect from the client:</p>

    <div class="example"><p><code>
    Redirect /foo.html /bar.html
    </code></p></div>

    </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="movehomedirs" id="movehomedirs">Resource Moved to Another Server</a></h2>

  

  <dl>
    <dt>Description:</dt>

    <dd>
      <p>If a resource has moved to another server, you may wish to have
      URLs continue to work for a time on the old server while people
      update their bookmarks.</p>
    </dd>

    <dt>Solution:</dt>

    <dd>
      <p>You can use <code class="module"><a href="../mod/mod_rewrite.html">mod_rewrite</a></code> to redirect these URLs
      to the new server, but you might also consider using the Redirect
      or RedirectMatch directive.</p>

<div class="example"><h3>With mod_rewrite</h3><p><code>
RewriteEngine on<br />
RewriteRule   ^/docs/(.+)  http://new.example.com/docs/$1  [R,L]
</code></p></div>

<div class="example"><h3>With RedirectMatch</h3><p><code>
RedirectMatch ^/docs/(.*) http://new.example.com/docs/$1
</code></p></div>

<div class="example"><h3>With Redirect</h3><p><code>
Redirect /docs/ http://new.example.com/docs/
</code></p></div>
    </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="static-to-dynamic" id="static-to-dynamic">From Static to Dynamic</a></h2>

  

  <dl>
    <dt>Description:</dt>

    <dd>
      <p>How can we transform a static page
      <code>foo.html</code> into a dynamic variant
      <code>foo.cgi</code> in a seamless way, i.e. without notice
      by the browser/user.</p>
    </dd>

    <dt>Solution:</dt>

    <dd>
      <p>We just rewrite the URL to the CGI-script and force the
      handler to be <strong>cgi-script</strong> so that it is
      executed as a CGI program.
      This way a request to <code>/~quux/foo.html</code>
      internally leads to the invocation of
      <code>/~quux/foo.cgi</code>.</p>

<div class="example"><p><code>
RewriteEngine  on<br />
RewriteBase    /~quux/<br />
RewriteRule    ^foo\.<strong>html</strong>$  foo.<strong>cgi</strong>  [H=<strong>cgi-script</strong>]
</code></p></div>
    </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="backward-compatibility" id="backward-compatibility">Backward Compatibility for file extension change</a></h2>

  

  <dl>
    <dt>Description:</dt>

    <dd>
      <p>How can we make URLs backward compatible (still
      existing virtually) after migrating <code>document.YYYY</code>
      to <code>document.XXXX</code>, e.g. after translating a
      bunch of <code>.html</code> files to <code>.php</code>?</p>
    </dd>

    <dt>Solution:</dt>

    <dd>
      <p>We rewrite the name to its basename and test for
      existence of the new extension. If it exists, we take
      that name, else we rewrite the URL to its original state.</p>

<div class="example"><p><code>
#   backward compatibility ruleset for<br />
#   rewriting document.html to document.php<br />
#   when and only when document.php exists<br />
&lt;Directory /var/www/htdocs&gt;<br />
<span class="indent">
RewriteEngine on<br />
RewriteBase /var/www/htdocs<br />
<br />
RewriteCond $1.php -f<br />
RewriteCond $1.html !-f<br />
RewriteRule ^(.*).html$ $1.php<br />
</span>
&lt;/Directory&gt;
</code></p></div>
    </dd>

    <dt>Discussion</dt>
    <dd>
    <p>This example uses an often-overlooked feature of mod_rewrite,
    by taking advantage of the order of execution of the ruleset. In
    particular, mod_rewrite evaluates the left-hand-side of the
    RewriteRule before it evaluates the RewriteCond directives.
    Consequently, $1 is already defined by the time the RewriteCond
    directives are evaluated. This allows us to test for the existence
    of the original (<code>document.html</code>) and target
    (<code>document.php</code>) files using the same base filename.</p>

    <p>This ruleset is designed to use in a per-directory context (In a
    &lt;Directory&gt; block or in a .htaccess file), so that the
    <code>-f</code> checks are looking at the correct directory path.
    You may need to set a <code class="directive"><a href="../mod/mod_rewrite.html#rewritebase">RewriteBase</a></code> directive to specify the
    directory base that you're working in.</p>
    </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="canonicalhost" id="canonicalhost">Canonical Hostnames</a></h2>



      <dl>
        <dt>Description:</dt>

        <dd>The goal of this rule is to force the use of a particular
        hostname, in preference to other hostnames which may be used to
        reach the same site. For example, if you wish to force the use
        of <strong>www.example.com</strong> instead of
        <strong>example.com</strong>, you might use a variant of the
        following recipe.</dd>

        <dt>Solution:</dt>

        <dd>

<p>The very best way to solve this doesn't involve mod_rewrite at all,
but rather uses the <code class="directive"><a href="../mod/mod_alias.html#redirect">Redirect</a></code>
directive placed in a virtual host for the non-canonical
hostname(s).</p>

<div class="example"><p><code>
&lt;VirtualHost *:80&gt;<br />
<span class="indent">
  ServerName undesired.example.com<br />
  ServerAlias example.com notthis.example.com<br />
<br />
  Redirect / http://www.example.com/<br />
</span>
&lt;/VirtualHost&gt;<br />
<br />
&lt;VirtualHost *:80&gt;<br />
<span class="indent">
  ServerName www.example.com<br />
</span>
&lt;/VirtualHost&gt;
</code></p></div>

<p>If, for whatever reason, you still want to use <code>mod_rewrite</code>
- if, for example, you need this to work with a larger set of RewriteRules - 
you might use one of the recipes below.</p>

<p>For sites running on a port other than 80:</p>
<div class="example"><p><code>
RewriteCond %{HTTP_HOST}   !^www\.example\.com [NC]<br />
RewriteCond %{HTTP_HOST}   !^$<br />
RewriteCond %{SERVER_PORT} !^80$<br />
RewriteRule ^/?(.*)         http://www.example.com:%{SERVER_PORT}/$1 [L,R,NE]
</code></p></div>

<p>And for a site running on port 80</p>
<div class="example"><p><code>
RewriteCond %{HTTP_HOST}   !^www\.example\.com [NC]<br />
RewriteCond %{HTTP_HOST}   !^$<br />
RewriteRule ^/?(.*)         http://www.example.com/$1 [L,R,NE]
</code></p></div>

        <p>
        If you wanted to do this generically for all domain names - that
        is, if you want to redirect <strong>example.com</strong> to
        <strong>www.example.com</strong> for all possible values of
        <strong>example.com</strong>, you could use the following
        recipe:</p>

<div class="example"><p><code>
RewriteCond %{HTTP_HOST} !^www\. [NC]<br />
RewriteCond %{HTTP_HOST} !^$<br />
RewriteRule ^/?(.*) http://www.%{HTTP_HOST}/$1 [L,R,NE]
</code></p></div>

    <p>These rulesets will work either in your main server configuration
    file, or in a <code>.htaccess</code> file placed in the <code class="directive"><a href="../mod/core.html#documentroot">DocumentRoot</a></code> of the server.</p>
        </dd>
      </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="multipledirs" id="multipledirs">Search for pages in more than one directory</a></h2>

  

  <dl>
    <dt>Description:</dt>

    <dd>
      <p>A particular resource might exist in one of several places, and
      we want to look in those places for the resource when it is
      requested. Perhaps we've recently rearranged our directory
      structure, dividing content into several locations.</p>
    </dd>

    <dt>Solution:</dt>

    <dd>
      <p>The following ruleset searches in two directories to find the
      resource, and, if not finding it in either place, will attempt to
      just serve it out of the location requested.</p>

<div class="example"><p><code>
RewriteEngine on<br />
<br />
#   first try to find it in dir1/...<br />
#   ...and if found stop and be happy:<br />
RewriteCond         %{DOCUMENT_ROOT}/<strong>dir1</strong>/%{REQUEST_URI}  -f<br />
RewriteRule  ^(.+)  %{DOCUMENT_ROOT}/<strong>dir1</strong>/$1  [L]<br />
<br />
#   second try to find it in dir2/...<br />
#   ...and if found stop and be happy:<br />
RewriteCond         %{DOCUMENT_ROOT}/<strong>dir2</strong>/%{REQUEST_URI}  -f<br />
RewriteRule  ^(.+)  %{DOCUMENT_ROOT}/<strong>dir2</strong>/$1  [L]<br />
<br />
#   else go on for other Alias or ScriptAlias directives,<br />
#   etc.<br />
RewriteRule   ^  -  [PT]
</code></p></div>
    </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="archive-access-multiplexer" id="archive-access-multiplexer">Redirecting to Geographically Distributed Servers</a></h2>

  

  <dl>
    <dt>Description:</dt>

    <dd>
    <p>We have numerous mirrors of our website, and want to redirect
    people to the one that is located in the country where they are
    located.</p>
    </dd>

    <dt>Solution:</dt>

    <dd>
    <p>Looking at the hostname of the requesting client, we determine
    which country they are coming from. If we can't do a lookup on their
    IP address, we fall back to a default server.</p>
    <p>We'll use a <code class="directive"><a href="../mod/mod_rewrite.html#rewritemap">RewriteMap</a></code>
    directive to build a list of servers that we wish to use.</p>

<div class="example"><p><code>
HostnameLookups on<br />
RewriteEngine on<br />
RewriteMap    multiplex         txt:/path/to/map.mirrors<br />
RewriteCond  %{REMOTE_HOST}     ([a-z]+)$ [NC]<br />
RewriteRule   ^/(.*)$  ${multiplex:<strong>%1</strong>|http://www.example.com/}$1  [R,L]
</code></p></div>

<div class="example"><p><code>
##  map.mirrors -- Multiplexing Map<br />
<br />
de        http://www.example.de/<br />
uk        http://www.example.uk/<br />
com       http://www.example.com/<br />
##EOF##
</code></p></div>
    </dd>

    <dt>Discussion</dt>
    <dd>
    <div class="warning">This ruleset relies on 
    <code class="directive"><a href="../mod/core.html#hostnamelookups">HostNameLookups</a></code> 
    being set <code>on</code>, which can be
    a significant performance hit.</div>

    <p>The <code class="directive"><a href="../mod/mod_rewrite.html#rewritecond">RewriteCond</a></code>
    directive captures the last portion of the hostname of the
    requesting client - the country code - and the following RewriteRule
    uses that value to look up the appropriate mirror host in the map
    file.</p>
    </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="browser-dependent-content" id="browser-dependent-content">Browser Dependent Content</a></h2>

  

  <dl>
    <dt>Description:</dt>

    <dd>
      <p>We wish to provide different content based on the browser, or
      user-agent, which is requesting the content.</p>
    </dd>

    

    <dt>Solution:</dt>

    <dd>
      <p>We have to decide, based on the HTTP header "User-Agent",
      which content to serve. The following config
      does the following: If the HTTP header "User-Agent"
      contains "Mozilla/3", the page <code>foo.html</code>
      is rewritten to <code>foo.NS.html</code> and the
      rewriting stops. If the browser is "Lynx" or "Mozilla" of
      version 1 or 2, the URL becomes <code>foo.20.html</code>.
      All other browsers receive page <code>foo.32.html</code>.
      This is done with the following ruleset:</p>

<div class="example"><p><code>
RewriteCond %{HTTP_USER_AGENT}  <strong>^Mozilla/3</strong>.*<br />
RewriteRule ^foo\.html$         foo.<strong>NS</strong>.html          [<strong>L</strong>]<br />
<br />
RewriteCond %{HTTP_USER_AGENT}  <strong>^Lynx/</strong>         [OR]<br />
RewriteCond %{HTTP_USER_AGENT}  <strong>^Mozilla/[12]</strong><br />
RewriteRule ^foo\.html$         foo.<strong>20</strong>.html          [<strong>L</strong>]<br />
<br />
RewriteRule ^foo\.html$         foo.<strong>32</strong>.html          [<strong>L</strong>]
</code></p></div>
    </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="canonicalurl" id="canonicalurl">Canonical URLs</a></h2>



<dl>
 <dt>Description:</dt>

   <dd>
     <p>On some webservers there is more than one URL for a
     resource. Usually there are canonical URLs (which are be
     actually used and distributed) and those which are just
     shortcuts, internal ones, and so on. Independent of which URL the
     user supplied with the request, they should finally see the
     canonical one in their browser address bar.</p>
   </dd>

   <dt>Solution:</dt>

     <dd>
       <p>We do an external HTTP redirect for all non-canonical
       URLs to fix them in the location view of the Browser and
       for all subsequent requests. In the example ruleset below
       we replace <code>/puppies</code> and <code>/canines</code>
       by the canonical <code>/dogs</code>.</p>

<div class="example"><p><code>
RewriteRule   ^/(puppies|canines)/(.*)    /dogs/$2  [R]
</code></p></div>
        </dd>

     <dt>Discussion:</dt>
     <dd>
     This should really be accomplished with Redirect or RedirectMatch
     directives:

     <div class="example"><p><code>
     RedirectMatch ^/(puppies|canines)/(.*) /dogs/$2
     </code></p></div>
     </dd>
      </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="moveddocroot" id="moveddocroot">Moved <code>DocumentRoot</code></a></h2>

  

  <dl>
    <dt>Description:</dt>

    <dd>
<p>Usually the <code class="directive"><a href="../mod/core.html#documentroot">DocumentRoot</a></code>
of the webserver directly relates to the URL "<code>/</code>".
But often this data is not really of top-level priority. For example,
you may wish for visitors, on first entering a site, to go to a
particular subdirectory <code>/about/</code>. This may be accomplished
using the following ruleset:</p>
</dd>

    <dt>Solution:</dt>

    <dd>
      <p>We redirect the URL <code>/</code> to
      <code>/about/</code>:
      </p>
     
<div class="example"><p><code>
RewriteEngine on<br />
RewriteRule   <strong>^/$</strong>  /about/  [<strong>R</strong>]
</code></p></div>

<p>Note that this can also be handled using the <code class="directive"><a href="../mod/mod_alias.html#redirectmatch">RedirectMatch</a></code> directive:</p>

<div class="example"><p><code>
RedirectMatch ^/$ http://example.com/about/
</code></p></div>

<p>Note also that the example rewrites only the root URL. That is, it
rewrites a request for <code>http://example.com/</code>, but not a
request for <code>http://example.com/page.html</code>. If you have in 
fact changed your document root - that is, if <strong>all</strong> of 
your content is in fact in that subdirectory, it is greatly preferable 
to simply change your <code class="directive"><a href="../mod/core.html#documentroot">DocumentRoot</a></code>
directive, or move all of the content up one directory,
rather than rewriting URLs.</p>
</dd>
</dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="fallback-resource" id="fallback-resource">Fallback Resource</a></h2>


<dl>
<dt>Description:</dt>
<dd>You want a single resource (say, a certain file, like index.php) to
handle all requests that come to a particular directory, except those
that should go to an existing resource such as an image, or a css file.</dd>

<dt>Solution:</dt>
<dd>
<p>As of version 2.2.16, you should use the <code class="directive"><a href="../mod/mod_dir.html#fallbackresource">FallbackResource</a></code> directive for this:</p>

<div class="example"><p><code>
&lt;Directory /var/www/my_blog&gt;<br />
<span class="indent">
  FallbackResource index.php<br />
</span>
&lt;/Directory&gt;
</code></p></div>

<p>However, in earlier versions of Apache, or if your needs are more
complicated than this, you can use a variation of the following rewrite
set to accomplish the same thing:</p>

<div class="example"><p><code>
&lt;Directory /var/www/my_blog&gt;<br />
<span class="indent">
  RewriteBase /my_blog<br />
<br />
  RewriteCond /var/www/my_blog/%{REQUEST_FILENAME} !-f<br />
  RewriteCond /var/www/my_blog/%{REQUEST_FILENAME} !-d<br />
  RewriteRule ^ index.php [PT]<br />
</span>
&lt;/Directory&gt;
</code></p></div>

<p>If, on the other hand, you wish to pass the requested URI as a query
string argument to index.php, you can replace that RewriteRule with:</p>

<div class="example"><p><code>
  RewriteRule (.*) index.php?$1 [PT,QSA]
</code></p></div>

<p>Note that these rulesets can be uses in a <code>.htaccess</code>
file, as well as in a &lt;Directory&gt; block.</p>

</dd>

</dl>

</div></div>
<div class="bottomlang">
<p><span>Available Languages: </span><a href="../en/rewrite/remapping.html" title="English">&nbsp;en&nbsp;</a></p>
</div><div class="top"><a href="#page-header"><img src="../images/up.gif" alt="top" /></a></div><div class="section"><h2><a id="comments_section" name="comments_section">Comments</a></h2><div class="warning"><strong>Notice:</strong><br />This is not a Q&amp;A section. Comments placed here should be pointed towards suggestions on improving the documentation or server, and may be removed again by our moderators if they are either implemented or considered invalid/off-topic. Questions on how to manage the Apache HTTP Server should be directed at either our IRC channel, #httpd, on Freenode, or sent to our <a href="http://httpd.apache.org/lists.html">mailing lists</a>.</div>
<script type="text/javascript"><!--//--><![CDATA[//><!--
var comments_shortname = 'httpd';
var comments_identifier = 'http://httpd.apache.org/docs/2.2/rewrite/remapping.html';
(function(w, d) {
    if (w.location.hostname.toLowerCase() == "httpd.apache.org") {
        d.write('<div id="comments_thread"><\/div>');
        var s = d.createElement('script');
        s.type = 'text/javascript';
        s.async = true;
        s.src = 'https://comments.apache.org/show_comments.lua?site=' + comments_shortname + '&page=' + comments_identifier;
        (d.getElementsByTagName('head')[0] || d.getElementsByTagName('body')[0]).appendChild(s);
    }
    else { 
        d.write('<div id="comments_thread">Comments are disabled for this page at the moment.<\/div>');
    }
})(window, document);
//--><!]]></script></div><div id="footer">
<p class="apache">Copyright 2013 The Apache Software Foundation.<br />Licensed under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>.</p>
<p class="menu"><a href="../mod/">Modules</a> | <a href="../mod/directives.html">Directives</a> | <a href="http://wiki.apache.org/httpd/FAQ">FAQ</a> | <a href="../glossary.html">Glossary</a> | <a href="../sitemap.html">Sitemap</a></p></div><script type="text/javascript"><!--//--><![CDATA[//><!--
if (typeof(prettyPrint) !== 'undefined') {
    prettyPrint();
}
//--><!]]></script>
</body></html>